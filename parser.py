from telethon import TelegramClient, events
import json
import os
from dotenv import load_dotenv

# load dotenv
load_dotenv()

# –î–∞–Ω–Ω—ñ API
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")

# –ù–∞–∑–≤–∞ —Å–µ—Å—ñ—ó
session_name = "telegram_parser_active"

# –§–∞–π–ª –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
LAST_MESSAGES_FILE = "last_messages.json"

# ID –∫–∞–Ω–∞–ª—É-–ø—Ä–∏–π–º–∞—á–∞ (–∑–∞–∫—Ä–∏—Ç–∏–π –∫–∞–Ω–∞–ª)
DEST_CHANNEL_ID = -1002403468473

# –ú–∞–ø–∞ –¥–∂–µ—Ä–µ–ª ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≥—ñ–ª–∫–∏ (topic_id)
channel_mapping = {
    os.getenv("CH_FIRST"): int(os.getenv("FORK_FIRST")),  
    os.getenv("CH_SECOND"): int(os.getenv("FORK_SECOND")),
    os.getenv("CH_THIRD"): int(os.getenv("FORK_THIRD")),
    os.getenv("CH_FOURTH"): int(os.getenv("FORK_THIRD")),
}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ID –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
if os.path.exists(LAST_MESSAGES_FILE):
    with open(LAST_MESSAGES_FILE, "r") as f:
        last_messages = json.load(f)
else:
    last_messages = {}

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def save_last_message(chat_id, message_id):
    last_messages[str(chat_id)] = message_id
    with open(LAST_MESSAGES_FILE, "w") as f:
        json.dump(last_messages, f)

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
client = TelegramClient(session_name, api_id, api_hash)

async def main():
    await client.start()
    me = await client.get_me()
    print(f"–Æ–∑–µ—Ä: {me.first_name} ({me.username})")

    @client.on(events.NewMessage())
    async def handler(event):
        chat_id = str(event.chat_id)
        message_id = event.message.id

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if chat_id in last_messages and message_id <= last_messages[chat_id]:
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á –¥–ª—è mapping (username –∞–±–æ chat_id)
        key = event.chat.username if event.chat and event.chat.username in channel_mapping else chat_id
        topic_ids = channel_mapping.get(key)

        if not topic_ids:
            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—ñ–ª–∫–∏ –¥–ª—è {chat_id}")
            return

        # –Ø–∫—â–æ –æ–¥–Ω–µ —á–∏—Å–ª–æ ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–ø–∏—Å–æ–∫
        if not isinstance(topic_ids, list):
            topic_ids = [topic_ids]

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ —É—Å—ñ –≥—ñ–ª–∫–∏
        for topic_id in topic_ids:
            try:
                await client.send_message(
                    entity=DEST_CHANNEL_ID,
                    message=event.message,
                    reply_to=topic_id
                )
                print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {chat_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—ñ–ª–∫—É {topic_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—ñ–ª–∫—É {topic_id}: {e}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        save_last_message(chat_id, message_id)

    print("üì° –ü–∞—Ä—Å–µ—Ä –ø—Ä–∞—Ü—é—î...")
    await client.run_until_disconnected()

client.loop.run_until_complete(main())
